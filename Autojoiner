-- Services
local HttpService = game:GetService("HttpService")
local CoreGui = game:GetService("CoreGui")

-- Create ScreenGui
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "NewAutoJoinUI"
ScreenGui.Parent = CoreGui
ScreenGui.ResetOnSpawn = false

-- Create Main Frame
local MainFrame = Instance.new("Frame")
MainFrame.Size = UDim2.new(0, 300, 0, 200)
MainFrame.Position = UDim2.new(0.5, -150, 0.4, -100)
MainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
MainFrame.BorderSizePixel = 0
MainFrame.Active = true
MainFrame.Draggable = true
MainFrame.Parent = ScreenGui

-- Add UICorner to Main Frame
local MainCorner = Instance.new("UICorner")
MainCorner.CornerRadius = UDim.new(0, 12)
MainCorner.Parent = MainFrame

-- Create Title
local Title = Instance.new("TextLabel")
Title.Size = UDim2.new(1, 0, 0, 40)
Title.Position = UDim2.new(0, 0, 0, 0)
Title.BackgroundColor3 = Color3.fromRGB(30, 30, 50)
Title.Text = "New AutoJoiner"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.Font = Enum.Font.GothamBold
Title.TextSize = 18
Title.TextXAlignment = Enum.TextXAlignment.Center
Title.TextYAlignment = Enum.TextYAlignment.Center
Title.Parent = MainFrame

-- Add UICorner to Title
local TitleCorner = Instance.new("UICorner")
TitleCorner.CornerRadius = UDim.new(0, 12)
TitleCorner.Parent = Title

-- Helper Functions
local function formatMoney(num)
    return string.format("%.1fM", num / 1000000)
end

local function parseInput(str)
    local num = tonumber(str)
    if num then
        return math.clamp(num * 1000000, 1000000, 20000000) -- Clamp between 1M and 20M
    end
    return nil
end

local function parseMoney(str)
    if not str then return 0 end
    local num, suffix = str:match("(%d+%.?%d*)([MK]?)")
    num = tonumber(num)
    if not num then return 0 end
    if suffix == "M" then
        return num * 1000000
    elseif suffix == "K" then
        return num * 1000
    else
        return num
    end
end

-- Config Management
local hwid = "unknown_hwid"
pcall(function()
    hwid = game:GetService("RbxAnalyticsService"):GetClientId()
end)
local cfgFile = "new_autojoin_" .. hwid .. ".json"

local function loadConfig()
    if isfile and isfile(cfgFile) then
        local success, data = pcall(function()
            return HttpService:JSONDecode(readfile(cfgFile))
        end)
        if success and type(data) == "table" then
            return data
        end
    end
    return { MinMS = 2000000 } -- Default to 2M
end

local function saveConfig(cfg)
    if writefile then
        pcall(function()
            writefile(cfgFile, HttpService:JSONEncode(cfg))
        end)
    end
end

local config = loadConfig()
local MinMS = config.MinMS or 2000000

-- GUI Elements
local AutoJoinEnabled = false
local ToggleButton = Instance.new("TextButton")
ToggleButton.Size = UDim2.new(1, -20, 0, 40)
ToggleButton.Position = UDim2.new(0, 10, 0, 50)
ToggleButton.BackgroundColor3 = Color3.fromRGB(40, 40, 60)
ToggleButton.Text = "Auto Join: OFF"
ToggleButton.TextColor3 = Color3.fromRGB(255, 100, 100)
ToggleButton.Font = Enum.Font.GothamBold
ToggleButton.TextSize = 16
ToggleButton.Parent = MainFrame

local ToggleCorner = Instance.new("UICorner")
ToggleCorner.CornerRadius = UDim.new(0, 8)
ToggleCorner.Parent = ToggleButton

local StatusLabel = Instance.new("TextLabel")
StatusLabel.Size = UDim2.new(1, -20, 0, 25)
StatusLabel.Position = UDim2.new(0, 10, 0, 100)
StatusLabel.BackgroundTransparency = 1
StatusLabel.Text = "Status: Disconnected"
StatusLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
StatusLabel.Font = Enum.Font.Gotham
StatusLabel.TextSize = 14
StatusLabel.Parent = MainFrame

local MinLabel = Instance.new("TextLabel")
MinLabel.Size = UDim2.new(1, -20, 0, 25)
MinLabel.Position = UDim2.new(0, 10, 0, 130)
MinLabel.BackgroundTransparency = 1
MinLabel.Text = "Min M/s: " .. formatMoney(MinMS)
MinLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
MinLabel.Font = Enum.Font.Gotham
MinLabel.TextSize = 14
MinLabel.Parent = MainFrame

local MinBox = Instance.new("TextBox")
MinBox.Size = UDim2.new(1, -20, 0, 30)
MinBox.Position = UDim2.new(0, 10, 0, 160)
MinBox.BackgroundColor3 = Color3.fromRGB(50, 50, 70)
MinBox.Text = tostring(MinMS / 1000000)
MinBox.TextColor3 = Color3.fromRGB(255, 255, 255)
MinBox.Font = Enum.Font.Gotham
MinBox.TextSize = 14
MinBox.ClearTextOnFocus = false
MinBox.Parent = MainFrame

local MinBoxCorner = Instance.new("UICorner")
MinBoxCorner.CornerRadius = UDim.new(0, 8)
MinBoxCorner.Parent = MinBox

-- Toggle Logic
ToggleButton.MouseButton1Click:Connect(function()
    AutoJoinEnabled = not AutoJoinEnabled
    ToggleButton.Text = "Auto Join: " .. (AutoJoinEnabled and "ON" or "OFF")
    ToggleButton.TextColor3 = AutoJoinEnabled and Color3.fromRGB(100, 255, 100) or Color3.fromRGB(255, 100, 100)
end)

-- Min Threshold Logic
MinBox.FocusLost:Connect(function()
    local val = parseInput(MinBox.Text)
    if val then
        MinMS = val
        MinLabel.Text = "Min M/s: " .. formatMoney(val)
        saveConfig({ MinMS = MinMS })
        MinBox.Text = tostring(MinMS / 1000000)
    else
        MinBox.Text = tostring(MinMS / 1000000)
    end
end)

-- WebSocket Logic
local ws = nil
local function connectWebSocket()
    if not WebSocket then
        StatusLabel.Text = "Status: WebSocket Not Supported"
        StatusLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
        warn("Your executor does not support WebSocket.")
        return
    end

    StatusLabel.Text = "Status: Connecting..."
    StatusLabel.TextColor3 = Color3.fromRGB(255, 200, 100)
    
    local newWs, err = WebSocket.connect("ws://your.websocket.server:port/path") -- Replace with your WebSocket URL
    if not newWs then
        StatusLabel.Text = "Status: Connection Failed"
        StatusLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
        warn("WebSocket Error:", tostring(err))
        -- Attempt to reconnect after 5 seconds
        task.wait(5)
        connectWebSocket()
        return
    end

    ws = newWs
    StatusLabel.Text = "Status: Connected"
    StatusLabel.TextColor3 = Color3.fromRGB(100, 255, 100)

    ws.OnMessage:Connect(function(msg)
        local success, data = pcall(function()
            return HttpService:JSONDecode(msg)
        end)
        if not success or type(data) ~= "table" then
            print("[NewAutoJoiner] Invalid message received")
            return
        end

        if AutoJoinEnabled and data.type == "server_update" and data.data and data.data.join_script then
            local moneyStr = data.data.money or "$0/s"
            local moneyVal = parseMoney(moneyStr)

            if moneyVal >= MinMS then
                StatusLabel.Text = "Status: Joining " .. moneyStr
                print("[NewAutoJoiner] Joining server with " .. moneyStr)
                local func, err = loadstring(data.data.join_script)
                if func then
                    pcall(func)
                else
                    warn("[NewAutoJoiner] Failed to load join script:", err)
                end
            else
                print("[NewAutoJoiner] Skipped server " .. moneyStr .. " < Min " .. formatMoney(MinMS))
            end
        end
    end)

    ws.OnClose:Connect(function()
        StatusLabel.Text = "Status: Disconnected"
        StatusLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
        print("[NewAutoJoiner] WebSocket disconnected, attempting to reconnect...")
        task.wait(5)
        connectWebSocket()
    end)
end

-- Initialize WebSocket
connectWebSocket()
